version: "3.8"
services:
  db:
    image: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: attendance
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./docker-compose/pgsql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    container_name: db
    networks:
      - attendance-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_storage:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: eis20232023
    command: server --console-address ":9001" /data
    container_name: minio
    networks:
      - attendance-network

  # statusreview:
  #   image: statusreview
  #   build:
  #     context: statusreview
  #     dockerfile: Dockerfile
  #   ports:
  #     - "10005:8080"
  #   networks:
  #     - attendance-network
  #   environment:
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/attendance
  #     - SPRING_DATASOURCE_USERNAME=postgres
  #     - SPRING_DATASOURCE_PASSWORD=postgres
  #     - MINIO_ENDPOINT=http://attendance.logixpress.co:9000
  #     - MINIO_ACCESS_KEY=yqzB5g5kTIEsmGqUXO3S
  #     - MINIO_SECRET_KEY=PpKlD40bbAoNj8BOJLU0o3MLtGErTGCmFDzv8xeS
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   container_name: statusreview

  # frontstatusreview:
  #   image: frontstatusreview
  #   build:
  #     context: status-review-front
  #     dockerfile: Dockerfile
  #   container_name: frontstatusreview
  #   ports:
  #     - "10006:10006"
  #   depends_on:
  #     - statusreview
  #   networks:
  #     - attendance-network

  register:
    image: register
    build:
      context: register
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    networks:
      - attendance-network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/attendance
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    container_name: register

  attendance:
    image: attendance
    build:
      context: attendance
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    networks:
      - attendance-network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/attendance
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    container_name: attendance

  client:
    image: client
    build:
      context: client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "5000:5000"
    networks:
      - attendance-network
    environment:
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=d11dg6NECr6xG0m4QU9s
      - MINIO_SECRET_KEY=vtW9nlenXrSUltI8W7hkj4Tzd39qPbM41Ad5Gz8J
      - TEST=enviroment-test
    depends_on:
      - minio

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./docker-compose/nginx:/etc/nginx/conf.d/
      #- ./status-review-front/dist:/var/www/statusfront
      - ./attendance-fr/dist:/var/www/ui
      #- ./status-review-front/dist:/var/www/statusfront
    networks:
      - attendance-network
    depends_on:
      - attendance
      - register
      - client
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/root/redis
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=eiseis
      - REDIS_PORT=6379
      - REDIS_DATABASES=16
    container_name: redis
    networks:
      - attendance-network

  metabase:
    image: metabase/metabase:latest
    ports:
      - 3000:3000
    volumes:
      - ./metabase-data:/metabase-data
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=postgres
      - MB_DB_PORT=5432
      - MB_DB_USER=postgres     
      - MB_DB_PASS=postgres
      - MB_DB_HOST=db
    depends_on:
      - db
    restart: always
    container_name: metabase
    networks:
      - attendance-network

networks:
  attendance-network:
    driver: bridge
